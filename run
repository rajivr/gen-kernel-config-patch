#!/bin/sh

set -e

# Following are modifiable variables for this script

# kernel version
# The choice of the kernel version is decided by the qemu_aarch64-dom0 kernel
# team
fullkver="4.19.34"

# kernel version without SUBLEVEL
mainkver=${fullkver%.*}

# KBRANCH_GIT is the yocto project kernel git
KBRANCH_GIT="git://git.yoctoproject.org/linux-yocto"

# KBRANCH is the yocto kernel branch that we use. See
# http://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#var-KBRANCH
KBRANCH="v${mainkver}/standard/tiny/base"

# KBRANCH_COMMIT
# This is the (merge) commit to use from KBRANCH
KBRANCH_COMMIT="1afd139db231e38e8e0f5ea03dcb77f9537ba2e0"

# YKC stands for yocto kernel cache
YKC_GIT="git://git.yoctoproject.org/yocto-kernel-cache"
YKC_BRANCH="yocto-$mainkver"
YKC_COMMIT="9bda6190bfc9e7858c2f7588109a0ec966f37a09"

# KMACHINE and KTYPE is used to extract out bsp description '.scc' file from
# yocto-kernel-cache
# http://www.yoctoproject.org/docs/2.5/kernel-dev/kernel-dev.html#bsp-descriptions

# http://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#var-KMACHINE
KMACHINE="zynq"

# http://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#var-KTYPE
KTYPE="tiny"

# Features and CFG from YKC
#
# efi.scc is needed for xen.scc. net.scc is required to enable virtio
# networking. standard.scc's include of vfat.scc does not import vfat.cfg, so we
# import cfg/fs/vfat.scc here.
KMETA_YKC_FEATURES_LIST="
    cfg/efi.scc
    cfg/fs/vfat.scc
    features/net/net.scc
    features/debug/debug-kernel.scc
    features/debug/printk.scc
    "

# Local features and CFG
KMETA_LOCAL_FEATURES_LIST="
    cfg/localversion.scc
    features/squashfs/squashfs.scc
    features/xen/xen.scc
    "

cleanup() {
    rm -rf "$tmp"
}

# _KBRANCH_GIT is the yocto project kernel git
#
# _KBRANCH is the yocto kernel branch that we use. See
# http://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#var-KBRANCH
#
# _KBRANCH_COMMIT
# This is the (merge) commit to use from KBRANCH
#
# _KBRANCH_GIT_DEPTH
# depth of the git tree to checkout.
#
# This roughly corresponds to poky's do_kernel_checkout task
checkout_yocto_kernel() {
    local _KBRANCH_GIT="${KBRANCH_GIT}"
    local _KBRANCH="${KBRANCH}"
    local _KBRANCH_COMMIT="${KBRANCH_COMMIT}"
    local _KBRANCH_GIT_DEPTH=50
    local saved_pwd=$(pwd -P)

    cd "$tmp"
    git clone -b "$_KBRANCH" --depth "$_KBRANCH_GIT_DEPTH" \
        --single-branch "$_KBRANCH_GIT" linux-yocto

    cd linux-yocto
    git checkout "$_KBRANCH_COMMIT" -b kbranch-commit
    cd "$saved_pwd"
}

# YKC stands for yocto kernel cache
checkout_yocto_kernel_cache() {
    local _YKC_GIT="${YKC_GIT}"
    local _YKC_BRANCH="${YKC_BRANCH}"
    local _YKC_COMMIT="${YKC_COMMIT}"
    local saved_pwd=$(pwd -P)

    cd "$tmp"
    git clone -b "$_YKC_BRANCH" --single-branch "$_YKC_GIT" yocto-kernel-cache

    cd yocto-kernel-cache
    git checkout "$_YKC_COMMIT" -b ykc-commit
    cd "$saved_pwd"
}

# This roughly corresponds to poky's do_kernel_meta task
#
# _KMACHINE
# http://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#var-KMACHINE
#
# _KTYPE
# http://www.yoctoproject.org/docs/2.5/ref-manual/ref-manual.html#var-KTYPE
#
# _KMACHINE and _KTYPE is used to extract out bsp description '.scc' file from
# yocto-kernel-cache
# http://www.yoctoproject.org/docs/2.5/kernel-dev/kernel-dev.html#bsp-descriptions
kernel_meta() {
    local _KMACHINE="${KMACHINE}"
    local _KTYPE="${KTYPE}"
    local _KARCH="arm64"
    local kmeta_ykc_features_list="${KMETA_YKC_FEATURES_LIST}"
    local kmeta_local_features_list="${KMETA_LOCAL_FEATURES_LIST}"

    local kmeta_local_dir="$(dirname $0)"
    local kmeta_ykc_dir="$tmp/yocto-kernel-cache"

    local bsp_definition=$(spp -I$kmeta_local_dir -I$kmeta_ykc_dir \
                               --find -DKMACHINE=$_KMACHINE -DKTYPE=$_KTYPE -DKARCH=$_KARCH)
    local meta_dir=$(kgit --meta)

    local kmeta_ykc_features=""
    for i in $kmeta_ykc_features_list; do
        kmeta_ykc_features="$kmeta_ykc_features $i"
    done

    local kmeta_local_features=""
    for i in $kmeta_local_features_list; do
        kmeta_local_features="$kmeta_local_features $i"
    done

    mkdir -p "$tmp/linux-yocto/$meta_dir"
    echo "$bsp_definition" > "$tmp/linux-yocto/$meta_dir/bsp_definition"

    # process cfg files
    scc --force -o "$tmp/linux-yocto/$meta_dir:cfg,merge,meta" \
        -I$kmeta_local_dir -I$kmeta_ykc_dir \
        $bsp_definition \
        $kmeta_local_features $kmeta_ykc_features

    # process patch files
    scc --force -o "$tmp/linux-yocto/$meta_dir:patch" --cmds patch \
        -I$kmeta_local_dir -I$kmeta_ykc_dir \
        $kmeta_local_features $kmeta_ykc_features
}

# This roughly corresponds to poky's do_patch task
# Takes a patch queue and applies them to the kernel tree
apply_patch() {
    local saved_pwd=$(pwd -P)

    cd "$tmp/linux-yocto"
    git config --local user.email virya.patch@virya
    git config --local user.name Virya

    local meta_dir=$(kgit --meta)
    (cd $meta_dir; ln -sf patch.queue series)
    if [ -f "$meta_dir/series" ]; then
        kgit-s2q --gen -v --patches $meta_dir
    fi

    cd "$saved_pwd"
}

# This roughly corresponds to poky's do_kernel_configme task
# Merges the config queue and generates the .config file using "make
# alldefconfig"
kernel_configme() {
   local saved_pwd=$(pwd -P)

   cd "$tmp/linux-yocto"
   meta_dir=$(kgit --meta)
   configs="$(scc --configs -o $meta_dir)"

   mkdir -p "$tmp/dot-configdir"
   ARCH=arm64 merge_config.sh -O "$tmp/dot-configdir" $configs > "$tmp/dot-configdir/merge_config_build.log" 2>&1

   cd "$saved_pwd"
}

# Extracts .config and generated patch to /tmp
extract_artifacts() {
    local saved_pwd=$(pwd -P)

    cd "$tmp/dot-configdir/source"
    git diff "v$fullkver" HEAD > /tmp/generated-kernel-patch.patch
    cp "$tmp/dot-configdir/.config" /tmp/config-zynqmp_aarch64-dom0.aarch64

    cd "$saved_pwd"
}

tmp="$(mktemp -d)"
trap cleanup EXIT

checkout_yocto_kernel

checkout_yocto_kernel_cache

kernel_meta

apply_patch

kernel_configme

extract_artifacts

echo "Generated config-qemu_aarch64-dom0.aarch64 and generated-kernel-patch.patch in /tmp"

echo -n "Cleaning up..."
cleanup
echo "Done!"
